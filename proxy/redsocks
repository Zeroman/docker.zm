#!/usr/bin/env bash

http_port=12345
https_port=12346
socks_port=12347

index=0
declare -a return_ips
add_return_ip() {
    return_ips[$index]="$1"
    index=$(expr $index + 1)
}

add_return_ip 10.0.0.0/8 
add_return_ip 127.0.0.0/8 
add_return_ip 169.254.0.0/16
add_return_ip 172.16.0.0/12
add_return_ip 172.17.0.0/12
add_return_ip 192.168.0.0/16
add_return_ip 224.0.0.0/4
add_return_ip 240.0.0.0/4

default_iface=$(ip route list | grep default | head -1 | awk '{print $5}')

proc_common_rules()
{
    iptable_common=$*

    for info in ${return_ips[*]}
    do
        ip=$(parse_ip $info)
        port=$(parse_port $info)
        if [ -z "$port" -o "$ip" = "$port" ];then
            echo "$iptable_common return $ip all port"
            $iptable_common -j RETURN -d $ip 
        else
            echo "$iptable_common return $ip:$port"
            $iptable_common -p tcp --dport $port -d $ip -j RETURN
        fi
    done

    if [ -n "$http_proxy" ]; then
        $iptable_common -p tcp -j REDIRECT --dport 80 --to-ports ${http_port} 
    fi
    if [ -n "$http_proxy" ]; then
        $iptable_common -p tcp -j REDIRECT --dport 443 --to-ports ${https_port} 
    fi
    if [ -n "$socks_proxy" ]; then
        $iptable_common -p tcp -j REDIRECT --to-ports ${socks_port}
    fi
}

prerouting_iptables_rules() 
{
    proc_common_rules iptables -t nat -$1 PREROUTING -i $2 
}

default_iptables_rules() 
{
    proc_common_rules iptables -t nat -$1 OUTPUT

    if [ "$1" = 'A' ];then
        iptables -t nat -I OUTPUT -m owner --uid-owner redsocks -j RETURN
    else
        iptables -t nat -$1 OUTPUT -m owner --uid-owner redsocks -j RETURN
    fi
}

default_route_rules()
{
    # enable makei a route
    iptables -t nat -$1 POSTROUTING -o ${default_iface} -j MASQUERADE
}

make_redsocks_conf_head() {
    (cat <<EOF
base {
    log_debug = off;
    log_info = on;
    log = "stderr";
    daemon = off;
    user = redsocks;
    group = redsocks;
    redirector = iptables;
}
EOF
) > /tmp/redsocks.conf
}

append_redsocks_conf() {
  local type=$1
  local ip=$2
  local port=$3
  local local_port=$4
  if [ -z "$type" -o -z "$ip" -o -z "$port" -o -z "$local_port" ] ; then
    echo missing required parameter >&2
    exit 1
  fi
  (cat <<EOF
redsocks {
  type = $type;
  ip = $ip;
  port = $port;
  local_ip = 0.0.0.0;
  local_port = $local_port;
}
EOF
) >> /tmp/redsocks.conf
}

parse_ip() {
    info=$1
    if [ "${info::4}" = "http" ];then
        echo $info | sed -nE "s/^(http(s)?:\/\/)?(.+):([0-9]+)\/?$/\3/p"
    else
        echo ${info%:*}
    fi
}

parse_port() {
    info=$1
    if [ "${info::4}" = "http" ];then
        echo $info | sed -nE "s/^(http(s)?:\/\/)?(.+):([0-9]+)\/?$/\4/p"
    else
        echo ${info/*:}
    fi
}

stop() {
    echo "Cleaning iptables"
    if [ -n "$docker_iface" ];then
        prerouting_iptables_rules D "$docker_iface"
    fi
    prerouting_iptables_rules D ${default_iface}
    default_iptables_rules D
    pkill -9 redsocks
    if [ "$gateway" = "yes" ]; then
        default_route_rules D
    fi
}

interrupted () {
    echo 'Interrupted, cleaning up...'
    trap - INT
    stop
    kill -INT $$
}

terminated () {
    echo 'Terminated, cleaning up...'
    trap - TERM
    stop
    kill -TERM $$
}

run() {
    trap interrupted INT
    trap terminated TERM QUIT

    make_redsocks_conf_head

    if [ -n "$http_proxy" ]; then
        ip=$(parse_ip $http_proxy)
        port=$(parse_port $http_proxy)
        if [ -n "$ip" -a -n "$port" ];then
            append_redsocks_conf "http-relay" $ip $port "${http_port}"
        fi

        if [ -z "$https_proxy" ]; then
            https_proxy="$http_proxy"
        fi
    fi

    if [ -n "$https_proxy" ]; then
        ip=$(parse_ip $https_proxy)
        port=$(parse_port $https_proxy)
        if [ -n "$ip" -a -n "$port" ];then
            append_redsocks_conf "http-connect" $ip $port "${https_port}"
        fi
    fi

    if [ -n "$socks_proxy" ]; then
        ip=$(parse_ip $socks_proxy)
        port=$(parse_port $socks_proxy)
        if [ -n "$ip" -a -n "$port" ];then
            echo "socks forwarding prot is $port."
            add_return_ip $socks_proxy
            append_redsocks_conf "socks5" $ip $port "${socks_port}"
        fi
    fi

    if [ -n "$ignore_addrs" ];then
        for ip in $(echo $ignore_addrs | tr , ' ')
        do 
            # echo "ignore addrs $ip"
            add_return_ip "$ip"
        done
    fi

    if [ -n "$docker_iface" ];then
        prerouting_iptables_rules A "$docker_iface"
    fi
    prerouting_iptables_rules A ${default_iface}
    default_iptables_rules A
    /usr/sbin/redsocks -c /tmp/redsocks.conf &

    if [ "$gateway" = "yes" ]; then
        default_route_rules A
    fi

    wait
}


case "$1" in
    stop )  stop ;;
    * )     run ;;
esac
